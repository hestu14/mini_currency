{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleClick","convertMoney","state","usd","eur","idr","jpy","sgd","btc","inputMoney","firstBox","secondBox","thirdBox","handleChange1","bind","handleChange2","axios","get","then","response","setState","data","rates","EUR","IDR","JPY","SGD","catch","error","console","log","parseInt","amount","event","this","target","value","refs","money","money1","money2","box1","box2","resultToFixed","toFixed","resultFormat","Intl","NumberFormat","format","Jumbotron","fluid","Container","className","Form","Group","Label","Control","ref","type","placeholder","onInput","Row","Col","xs","lg","controlId","as","onChange","selected","onClick","readOnly","id","class","rel","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.dfd3b44f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Form, Container, Col, Row, Jumbotron } from 'react-bootstrap';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      usd: 1,\n      eur: '',\n      idr: '',\n      jpy: '',\n      sgd: '',\n      btc: '',\n      inputMoney: '',\n      firstBox: 'usd',\n      secondBox: 'idr',\n      thirdBox: '0'\n    };\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n\n  }\n\n  componentDidMount() {\n    axios.get('https://api.frankfurter.app/latest?amount=1&from=USD&to=IDR,EUR,JPY,SGD', {\n      \"async\": true,\n      \"crossDomain\": true,\n      \"method\": \"GET\",\n      // \"headers\": {\n      //   \"content-type\": \"application/json;charset=utf-8\",\n      // },\n      // \"processData\": false,\n      \"data\": \"{}\"\n    }).then((response) => {\n      // console.log(response);\n      this.setState({\n        eur: response.data.rates.EUR,\n        idr: response.data.rates.IDR,\n        jpy: response.data.rates.JPY,\n        sgd: response.data.rates.SGD,\n      })\n    })\n      .catch(error => {\n        console.log(error.response)\n      });\n\n    axios.get('https://api.coinbase.com/v2/prices/spot?currency=USD', {\n      \"async\": true,\n      \"crossDomain\": true,\n      \"method\": \"GET\",\n      // \"headers\": {\n      //   \"content-type\": \"application/json;charset=utf-8\",\n      // },\n      // \"processData\": false,\n      \"data\": \"{}\"\n    }).then((response) => {\n      // console.log(response.data.data.amount);\n      this.setState({\n        btc: 1 / parseInt(response.data.data.amount),\n      })\n    })\n      .catch(error => {\n        console.log(error.response)\n      });\n\n\n  }\n\n  handleChange1(event) {\n    this.setState({ firstBox: event.target.value });\n  }\n\n  handleChange2(event) {\n    this.setState({ secondBox: event.target.value });\n  }\n\n  inputMoney() {\n    this.setState({ inputMoney: this.refs.money.value });\n  }\n\n\n  convertMoney() {\n    var box1 = this.state.firstBox;\n    var box2 = this.state.secondBox;\n    var inputMoney = this.state.inputMoney;\n    // console.log(box1);\n    // console.log(box2);\n\n\n    var money1;\n    switch (box1) {\n      case 'usd':\n        money1 = this.state.usd;\n        break;\n      case 'idr':\n        money1 = this.state.idr;\n        break;\n      case 'eur':\n        money1 = this.state.eur;\n        break;\n      case 'jpy':\n        money1 = this.state.jpy;\n        break;\n      case 'sgd':\n        money1 = this.state.sgd;\n        break;\n      case 'btc':\n        money1 = this.state.btc;\n    }\n\n    // console.log(money1);\n\n    var money2;\n    switch (box2) {\n      case 'usd':\n        money2 = this.state.usd;\n        break;\n      case 'idr':\n        money2 = this.state.idr;\n        break;\n      case 'eur':\n        money2 = this.state.eur;\n        break;\n      case 'jpy':\n        money2 = this.state.jpy;\n        break;\n      case 'sgd':\n        money2 = this.state.sgd;\n        break;\n      case 'btc':\n        money2 = this.state.btc;\n    \n    }\n\n    // console.log(money2);\n\n    var result = inputMoney / money1 * money2;\n    var resultToFixed = result.toFixed(2);\n    var resultFormat = new Intl.NumberFormat('de-DE').format(resultToFixed);\n\n    console.log(typeof(resultFormat));\n\n    if (resultFormat === 'NaN') {\n      this.setState({ thirdBox: 'Input nominal salah' });  \n    } else {\n      this.setState({ thirdBox: resultFormat });\n    }\n\n  }\n\n  handleClick = () => {\n    this.convertMoney()\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Jumbotron fluid>\n          <Container>\n            <h1>Mini Currency</h1>\n            <p>\n              Build using react, react-bootstrap and axios.\n           </p>\n          </Container>\n        </Jumbotron>\n\n        <Container className=\"mt-3\">\n          <Form>\n            <Form.Group>\n              <Form.Label>Input</Form.Label>\n              <Form.Control ref=\"money\" type=\"text\" placeholder=\"ex: 100\" value={this.state.inputMoney} onInput={() => { this.inputMoney(); }} />\n            </Form.Group>\n          </Form>\n\n          <Row>\n            <Col xs={5} lg={4} className=\"mt-3\">\n\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <Form.Control as=\"select\" value={this.state.firstBox} onChange={this.handleChange1}>\n                  <option value=\"usd\" selected=\"selected\" >USD</option>\n                  <option value=\"eur\">EUR</option>\n                  <option value=\"idr\">IDR</option>\n                  <option value=\"jpy\">JPY</option>\n                  <option value=\"sgd\">SGD</option>\n                  <option value=\"btc\">Bitcoin</option>\n                </Form.Control>\n              </Form.Group>\n\n            </Col>\n\n\n            <Col xs={2} lg={1} className=\"mt-3\">\n              <div className='text-convert'> <span> to </span></div>\n            </Col>\n\n\n            <Col xs={5} lg={4} className=\"mt-3\">\n              <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                <Form.Control as=\"select\" value={this.state.secondBox} onChange={this.handleChange2}>\n                  <option value=\"usd\">USD</option>\n                  <option value=\"eur\">EUR</option>\n                  <option value=\"idr\" selected=\"selected\">IDR</option>\n                  <option value=\"jpy\">JPY</option>\n                  <option value=\"sgd\">SGD</option>\n                  <option value=\"btc\">Bitcoin</option>\n                </Form.Control>\n              </Form.Group>\n            </Col>\n\n            <Col lg={3} className=\"mt-3\">\n              <button type=\"button\" className=\"button-convert btn btn-secondary\" onClick={this.handleClick}> Convert </button>\n            </Col>\n          </Row>\n\n\n          <Form className=\"mt-3\">\n            <Form.Group>\n              <Form.Label>Result</Form.Label>\n              <Form.Control type=\"text\" readOnly value={this.state.thirdBox} />\n            </Form.Group>\n          </Form>\n\n\n          {/* <div>\n            <h4> Rates terhadap USD </h4>\n            <h6> EUR : {this.state.eur} </h6>\n            <h6> IDR : {this.state.idr} </h6>\n            <h6> JPY : {this.state.jpy} </h6>\n            <h6> SGD : {this.state.sgd} </h6>\n            <h6> Bitcoin : {this.state.btc} </h6>\n          </div> */}\n\n        </Container>\n\n        \n        <footer id=\"sticky-footer\" class=\"py-4 text-white-50\">\n          <div className=\"container text-center\">\n            <small>API by : <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://www.frankfurter.app/'>www.frankfurter.app</a> & <a target=\"_blank\" rel=\"noopener noreferrer\" href='https://www.coinbase.com/'>api.coinbase.com</a> </small>\n          </div>\n        </footer>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}